{"version":3,"file":"ngx-restangular-http.js","sourceRoot":"","sources":["../../../src/ngx-restangular-http.ts"],"names":[],"mappings":";;AAAA,sCAAyC;AACzC,sCAA4C;AAC5C,8CAA2C;AAE3C,qCAAkC;AAClC,iCAA8B;AAC9B,mCAAgC;AAEhC,mEAA2D;;IAMzD,yBAAmB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;KAC5B;IAED,uCAAa,GAAb,UAAc,OAAO;QACnB,IAAI,cAAc,GAAG,0CAAiB,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;QACrE,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC,cAAc,CAAC,CAAC;QAE1C,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;KAC9B;IAED,iCAAO,GAAP,UAAQ,OAAO;QAAf,iBA4BC;QA3BC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;aAChC,GAAG,CAAC,UAAC,QAAa;YACjB,QAAQ,CAAC,MAAM,GAAG,EAAC,MAAM,EAAE,OAAO,EAAC,CAAC;YACpC,MAAM,CAAC,QAAQ,CAAC;SACjB,CAAC;aACD,GAAG,CAAC,UAAC,QAAa;YACjB,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;gBACnB,QAAQ,CAAC,IAAI,GAAG,OAAO,QAAQ,CAAC,KAAK,IAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC;aACjG;YAAC,IAAI,CAAC,CAAC;gBACN,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAA;aACrB;YACD,MAAM,CAAC,QAAQ,CAAC;SACjB,CAAC;aACD,KAAK,CAAC,UAAA,GAAG;YACR,IAAI,CAAC;gBACH,GAAG,CAAC,IAAI,GAAG,OAAO,GAAG,CAAC,KAAK,IAAI,QAAQ,IAAI,GAAG,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC;aACrG;YAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;gBACX,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC;aACtB;YAED,GAAG,CAAC,OAAO,GAAG,OAAO,CAAC;YACtB,GAAG,CAAC,aAAa,GAAG,UAAC,UAAW;gBAC9B,MAAM,CAAC,KAAI,CAAC,OAAO,CAAC,UAAU,IAAI,OAAO,CAAC,CAAC;aAC5C,CAAC;YAEF,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;SAC9B,CAAC,CAAA;KACH;;gBAzCF,iBAAU;;;;gBAVH,WAAI;;0BADZ;;AAYa,0CAAe","sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {Http, Request} from '@angular/http';\r\nimport {Observable} from 'rxjs/Observable';\r\n\r\nimport 'rxjs/add/observable/throw'\r\nimport 'rxjs/add/operator/map'\r\nimport 'rxjs/add/operator/catch'\r\n\r\nimport {RestangularHelper} from './ngx-restangular-helper';\r\n\r\n\r\n@Injectable()\r\nexport class RestangularHttp {\r\n  \r\n  constructor(public http: Http) {\r\n  }\r\n  \r\n  createRequest(options) {\r\n    let requestOptions = RestangularHelper.createRequestOptions(options);\r\n    let request = new Request(requestOptions);\r\n    \r\n    return this.request(request);\r\n  }\r\n  \r\n  request(request) {\r\n    return this.http.request(request)\r\n    .map((response: any) => {\r\n      response.config = {params: request};\r\n      return response;\r\n    })\r\n    .map((response: any) => {\r\n      if (response._body) {\r\n        response.data = typeof response._body == 'string' ? JSON.parse(response._body) : response._body;\r\n      } else {\r\n        response.data = null\r\n      }\r\n      return response;\r\n    })\r\n    .catch(err => {\r\n      try {\r\n        err.data = typeof err._body == 'string' && err._body.length > 0 ? JSON.parse(err._body) : err._body;\r\n      } catch (e) {\r\n        err.data = err._body;\r\n      }\r\n      \r\n      err.request = request;\r\n      err.repeatRequest = (newRequest?) => {\r\n        return this.request(newRequest || request);\r\n      };\r\n      \r\n      return Observable.throw(err);\r\n    })\r\n  }\r\n}\r\n\r\n"]}